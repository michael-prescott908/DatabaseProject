@app.route('/registerclass/<string:id>')
def registerclass(id):
    if 'username' not in session:
        flash("You are not authorized", 'danger')
        return render_template('home.html')
    else:
        # Create Cursor
        cur = mysql.connection.cursor()
        cur2 = mysql.connection.cursor()
        """
        cur2.execute("INSERT INTO TAKES (StudentID, CourseID) VALUES (%s, %s)", (session['number'], id))
        mysql.connection.commit()
        flash("You have registered for the class!", 'success')
        return render_template('home.html')
        """
        timeslot = cur2.execute("SELECT TimeSlot FROM Courses WHERE CourseID = %s", [id])

        timeslot = cur2.fetchone()
        # Execute
        res = cur.execute("SELECT TimeSlot FROM Takes, Courses WHERE StudentID=%s AND Courses.CourseID = Takes.CourseID AND TimeSlot = %s", [session['number'], timeslot])
        # Commit to DB
        results = cur.fetchone()

        if res > 0:
            flash("CONFLICT: Already registered for a class in this time slot.", 'danger')
            return render_template('home.html')
        else:
            cur3 = mysql.connection.cursor()
            cur4 = mysql.connection.cursor()

            mygrade = cur3.execute("SELECT CurrentGrade FROM schoolinginfo WHERE StudentID = %s", [session['number']])
            classGradeRange = cur4.execute("SELECT GradeRange FROM Courses WHERE CourseID = %s", [id])

            mygrade = cur3.fetchone()
            classGradeRange = cur4.fetchone()

            #print("This is the value returned from the tupe: %s", [mygrade[0]])
            lower,upper = classGradeRange[0].split("-")

            print("Lower bound: %s", [lower])
            print("Upper bound: %s", [upper])

            thegrade = re.sub('[^0-9]','', mygrade[0])

            print("The Grade: %s", [thegrade])

            if thegrade <= upper and thegrade >= lower:
			    cur7 = mysql.connection.cursor()
				cur7.execute("SELECT CurCapacity FROM Courses WHERE CourseID = %s", [id])
				thisValue = cur7.fetchone()
			
			    if thisValue[0] > 0:
					newValue = thisValue[0] + 1
					
					cur6 = mysql.connection.cursor()
					cur6.execute("UPDATE Courses SET CurCapacity = %s WHERE CourseID = %s", [newValue, id])
					mysql.connection.commit()
				
					cur5 = mysql.connection.cursor()
					cur5.execute("INSERT INTO TAKES (StudentID, CourseID) VALUES (%s, %s)", (session['number'], id))
					mysql.connection.commit()
					flash("You have registered for the class!", 'success')
					return render_template('home.html')
				else:
					flash("This class is out of space.", 'danger')
					return render_template('home.html')
            else:
                flash("CONFLICT: This class is not available for your grade range", 'danger')
                return render_template('home.html')
                
@app.route('/unregisterclass/<string:id>')
def unregisterclass(id):
    if 'username' not in session:
        flash("You are not authorized", 'danger')
        return render_template('home.html')
    else:
        # Create Cursor
        cur = mysql.connection.cursor()
        cur.execute("SELECT CurCapacity FROM Courses WHERE CourseID = %s", [id])
		result = cur.fetchone()
		
		newValue = result[0] + 1
		
		cur2 = mysql.connection.cursor()
		cur.execute("UPDATE Courses SET CurCapacity = %s WHERE CourseID = %s", [newValue, id])
		mysql.connection.commit()
		
		cur3 = mysql.connection.cursor()
		cur3.execute("DELETE FROM Takes WHERE CourseID = %s AND StudentID = %s", [id, session['number']])
		mysql.connection.commit()
		
		flash("You have successfully unregistered from this course.", 'success')
		return render_template('home.html')